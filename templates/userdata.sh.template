#!/usr/bin/env bash
 
# -- ABOUT THIS PROGRAM: ------------------------------------------------------
#
# Author:       Tritium - VLK && Ewok
# Version:      1.0.0
# Description:  Creation of node
# Source:       https://github.com/DevOps4DeFi/bsc-archivenode
#
# -- INSTRUCTIONS: ------------------------------------------------------------
#
#
# Options:
#   -h, --help      output program instructions
#   -v, --version   output program version
#
# Alias:
#   alias myalias="bash ~/path/to/script/userdata.sh"
#
# Example:
#   Full Setup of BSC Geth Node
#
# Important:
#   Spot check versions before install to meet most recent dependency, software
#   and version requirements
#
# -- CHANGELOG: ---------------------------------------------------------------
#
#   DESCRIPTION:    First release
#   VERSION:        1.0.0
#   DATE:           3/15/2021
#   AUTHOR:         Tritium VLK && Ewok
#
# -- TODO & FIXES: ------------------------------------------------------------
#
#   -
#   -
#   - 
#   - 
#
# -----------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# | VARIABLES                                                                  |
# ------------------------------------------------------------------------------
 
VERSION="1.0.0"
PROGRAM="bsc-node-deploy"
 
# ------------------------------------------------------------------------------
# | UTILS                                                                      |
# ------------------------------------------------------------------------------
 
# Header logging
e_header() {
    printf "$(tput setaf 38)→ %s$(tput sgr0)\n" "$@"
}
 
# Success logging
e_success() {
    printf "$(tput setaf 76)✔ %s$(tput sgr0)\n" "$@"
}
 
# Error logging
e_error() {
    printf "$(tput setaf 1)✖ %s$(tput sgr0)\n" "$@"
}
 
# Warning logging
e_warning() {
    printf "$(tput setaf 3)! %s$(tput sgr0)\n" "$@"
}
 
# ------------------------------------------------------------------------------
# | MAIN FUNCTIONS                                                             |
# ------------------------------------------------------------------------------
 
# My Script Help
myscript_help() {
 
cat <<EOT
 
------------------------------------------------------------------------------
MYSCRIPT - DESCRIPTION
------------------------------------------------------------------------------
 
Usage: ./myscript.sh [options]
Example: ./myscript.sh
 
Options:
    -h, --help      output program instructions
    -v, --version   output program version
 
Important:
    If you prefer, create an alias: myalias="bash ~/path/to/script/myscript.sh"
    And execute with: myscript
 
EOT
 
}
 
# My Script Version
myscript_version() {
    echo "$PROGRAM: v$VERSION"
}
 
# My Script Start
myscript_start() {

    # Script Start
    echo "bsc-node-deploy Automated Installation"
    echo "Maintained by Badger"
    echo "********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
****************,.,.  ...,*****###,,,,,,,,,,,,,###*****,..   ...,***************
****************.. #@@&    (@@@@@@,.         ,,@@@@@@*    @@@( ..***************
****************@@@@@@@@@@@@@@@@@@*,.       .,*@@@@@@@@@@@@@@@@@&***************
****************@@@@@@@@@@@@@@@@@@,.         ,.@@@@@@@@@@@@@@@@@&***************
******************@@@@@@@@@@@@@@@@@%,..    .,&@@@@@@@@@@@@@@@@@*****************
******************@@@@@@@@@@@@@@@@@%,..    .,&@@@@@@@@@@@@@@@@@*****************
****************..,#@@@@@@@@@@@@@@,.         ,,@@@@@@@@@@@@@@(,..***************
****************.  .,@@@@@@@@@@@@@,.         ,,@@@@@@@@@@@@@,.  .***************
**************,.     ,/@@@@@@@@@@@,..        ,,@@@@@@@@@@@,,     .,*************
*************,.      ,/@@@@@@@@@@@,.         ,,@@@@@@@@@@@*,      ,,************
*************         .,@@@@@@@@@@,..        ,,@@@@@@@@@&,         .************
*************         .,@@@@@@@@@@,..        ,,@@@@@@@@@&,         .************
**************,.        ,,@@@@@@@@,,        .,,@@@@@@@@,,        .,*************
**************** .      ,,@@@&&@@@@%,..    .,&@@@&@@@@@,,       .***************
******************      ,,@@@@@@@@@%,.    ..,&@@@@@@@@@,,     .*****************
*******************#@,,   ,(@@@@@@@%,..    .,&@@@@@@@/,   ,,@(******************
*******************#@@%,   .,@@@@@,.         ,.@@@@&,.   ,&@@(******************
**********************/@@@,. ,*@@@,.         ,,@@@,, ,,@@@**********************
************************%&@#*,*@@@,.        .,,@@@,,*%@&#***********************
***************************(@,*@@@,,        .,,@@@,,@/**************************
*****************************,*%,..,/////////.../%,,****************************
*******************************,,,@@@@@@@@@@@@@,,,******************************
********************************,,@@@@@@@@@@@@@,,*******************************
**********************************,/@@@@@@@@@/,*********************************
**************************************/////*************************************
********************************************************************************
********************************************************************************"
    echo "If installation fails, please check logfile in /var/log/bsc-node-deploy.log"
    echo "Please wait while installation and configuration begins"
    echo "Initializing Script..."

# Global Variables
    LOGFILE="/var/log/bsc-node-deploy.log"
    echoerror() {
        printf "$${RC} * ERROR$${EC}: $@\n" 1>&2;
    }

#!/bin/bash
## a userdata script to bring an amazon linux 2 instance up and running as a bsc archive node
apt update >> $LOGFILE 2>&1
apt install -y awscli >> $LOGFILE 2>&1
apt install -y jq >> $LOGFILE 2>&1
apt install -y git >> $LOGFILE 2>&1
apt install -y gcc >> $LOGFILE 2>&1
wget -c https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local >> $LOGFILE 2>&1
export PATH=$PATH:/usr/local/go/bin >> $LOGFILE 2>&1
export GOPATH=/usr/local/go/bin
apt install -y unzip >> $LOGFILE 2>&1
apt install -y make >> $LOGFILE 2>&1
### Install go dependancies
go get -d github.com/ethereum/go-ethereum


    ERROR=$?
        if [ $ERROR -ne 0 ]; then
            echoerror "Failure installing dependencies... (Error Code: $ERROR)."
        fi

 SUMO_ID=${sumo_key_ssm_path}
 SUMO_KEY=${sumo_key_ssm_path}
 AWS_REGION=${region}
 MOUNT_POINT=${mount_point}

## Geth Deploy 


#add-apt-repository -y ppa:ethereum/ethereum >> $LOGFILE 2>&1
#apt-get update -y >> $LOGFILE 2>&1
#apt-get install ethereum -y >> $LOGFILE 2>&1


# If no FS, then this output contains "data"
DEVICE=${ebs_device_name}
FS_TYPE=$(file -s $DEVICE | awk '{print $2}')
if [ "$FS_TYPE" = "data" ]
then
    echo "Creating file system on $DEVICE" >> $LOGFILE 2>&1
    mkfs -t xfs $DEVICE >> $LOGFILE 2>&1
fi
mkdir -p $MOUNT_POINT >> $LOGFILE 2>&1
echo "$DEVICE  $MOUNT_POINT  xfs  defaults,nofail  0  2" >> /etc/fstab
mount $MOUNT_POINT >> $LOGFILE 2>&1
cd $MOUNT_POINT >> $LOGFILE 2>&1
git clone https://github.com/binance-chain/bsc >> $LOGFILE 2>&1
cd bsc
export PATH=$PATH:/usr/local/go/bin:. >> $LOGFILE 2>&1
export GOPATH=/usr/local/go/bin
export HOME=/root
make geth >> $LOGFILE 2>&1
cp ./build/bin/geth ../
cd ../
## Geth Configuration Files
wget   $(curl -s https://api.github.com/repos/binance-chain/bsc/releases/latest |grep browser_ |grep mainnet |cut -d\" -f4) >> $LOGFILE 2>&1
unzip mainnet.zip >> $LOGFILE 2>&1
cp config.toml config.toml.orig
### Allow connections from everywhere
sed -i 's/HTTPHost = \"localhost\"/HTTPHost = \"0.0.0.0\"/g' config.toml
sed -i 's/HTTPVirtualHosts = \[\"localhost\"\]/HTTPVirtualHosts = \[\"\*\"\]/g' config.toml
## Write Local Genesis State
geth --datadir node init genesis.json >> $LOGFILE 2>&1
#geth account new --datadir ./node >> $LOGFILE 2>&1

# Restart GETH Node service on reboot.
touch startgeth.sh >> $LOGFILE 2>&1

cat >> startgeth.sh <<EOL
export HOME=/root
export PATH=$PATH:/usr/local/go/bin:. >> $LOGFILE 2>&1
export GOPATH=/usr/local/go/bin
cd $MOUNT_POINT
./geth --config ./config.toml  --datadir ./node --syncmode full --gcmode=archive --pprofaddr 0.0.0.0 --metrics --pprof --rpc --rpcaddr 0.0.0.0 --rpcapi eth,net,web3,personal --rpccorsdomain '*' >>geth.log 2>&1
EOL

chmod 755 startgeth.sh >> $LOGFILE 2>&1
touch /lib/systemd/system/geth.service >> $LOGFILE 2>&1
cat >> /lib/systemd/system/geth.service <<EOL
[Unit]
Description=Ethereum go client
[Service]
User=root
Type=simple
WorkingDirectory=$MOUNT_POINT
ExecStart=/bin/bash $MOUNT_POINT/startgeth.sh
Restart=on-failure
RestartSec=5
[Install]
WantedBy=default.target
EOL

systemctl start geth

## Install Sumo Collector
mkdir /sumo >> $LOGFILE 2>&1
cd /sumo >> $LOGFILE 2>&1
wget "https://collectors.sumologic.com/rest/download/linux/64" -O SumoCollector.sh && chmod +x SumoCollector.sh >> $LOGFILE 2>&1
chmod +x SumoCollector.sh >> $LOGFILE 2>&1
./SumoCollector.sh -q -Vsumo.accessid=$SUMO_ID -Vsumo.accesskey=$SUMO_KEY -VsyncSources=$MOUNT_POINT/node/ -Vcollector.name=bsc-archive-node >> $LOGFILE 2>&1


}


# ------------------------------------------------------------------------------
# | INITIALIZE PROGRAM                                                         |
# ------------------------------------------------------------------------------
 
main() {
 
    if [[ "$${1}" == "-h" || "$${1}" == "--help" ]]; then
        myscript_help $${1}
        exit
    elif [[ "$${1}" == "-v" || "$${1}" == "--version" ]]; then
        myscript_version $${1}
        exit
    else
        myscript_start
    fi
 
}
 
# Initialize
main $*
