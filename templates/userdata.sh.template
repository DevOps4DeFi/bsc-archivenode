#!/bin/bash

# Global Variables
    LOGFILE="/var/log/bsc-node-deploy.log"
    echoerror() {
        printf "$${RC} * ERROR$${EC}: $@\n" 1>&2;
    }

#!/bin/bash
## a userdata script to bring an amazon linux 2 instance up and running as a bsc archive node
apt update >> $LOGFILE 2>&1
apt install -y awscli >> $LOGFILE 2>&1
apt install -y jq >> $LOGFILE 2>&1
apt install -y git >> $LOGFILE 2>&1
apt install -y gcc >> $LOGFILE 2>&1
apt install -y prometheus-node-exporter  >> $LOGFILE 2>&1
wget -c https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local >> $LOGFILE 2>&1
export PATH=$PATH:/usr/local/go/bin >> $LOGFILE 2>&1
export GOPATH=/usr/local/go/bin
apt install -y unzip >> $LOGFILE 2>&1
apt install -y make >> $LOGFILE 2>&1
### Install go dependancies
go get -d github.com/ethereum/go-ethereum


    ERROR=$?
        if [ $ERROR -ne 0 ]; then
            echoerror "Failure installing dependencies... (Error Code: $ERROR)."
        fi

 SUMO_ID=${sumo_key_ssm_path}
 SUMO_KEY=${sumo_key_ssm_path}
 AWS_REGION=${region}
 MOUNT_POINT=${mount_point}

## Geth Deploy 


#add-apt-repository -y ppa:ethereum/ethereum >> $LOGFILE 2>&1
#apt-get update -y >> $LOGFILE 2>&1
#apt-get install ethereum -y >> $LOGFILE 2>&1


# If no FS, then this output contains "data"
DEVICE=${ebs_device_name}
FS_TYPE=$(file -s $DEVICE | awk '{print $2}')
if [ "$FS_TYPE" = "data" ]
then
    echo "Creating file system on $DEVICE" >> $LOGFILE 2>&1
    mkfs -t xfs $DEVICE >> $LOGFILE 2>&1
fi
mkdir -p $MOUNT_POINT >> $LOGFILE 2>&1
echo "$DEVICE  $MOUNT_POINT  xfs  defaults,nofail  0  2" >> /etc/fstab
mount $MOUNT_POINT >> $LOGFILE 2>&1
rm /$MOUNT_POINT/node/geth/nodekey
cd $MOUNT_POINT >> $LOGFILE 2>&1

wget  https://github.com/binance-chain/bsc/releases/download/v1.0.7/geth_linux
mv geth_linux geth
## Geth Configuration Files
cp config.toml config.toml.beforeinit
wget   $(curl -s https://api.github.com/repos/binance-chain/bsc/releases/latest |grep browser_ |grep mainnet |cut -d\" -f4) >> $LOGFILE 2>&1
unzip mainnet.zip >> $LOGFILE 2>&1
cp config.toml config.toml.orig
### Allow connections from everywhere
sed -i 's/HTTPHost = \"localhost\"/HTTPHost = \"0.0.0.0\"/g' config.toml
sed -i 's/HTTPVirtualHosts = \[\"localhost\"\]/HTTPVirtualHosts = \[\"\*\"\]/g' config.toml
## Write Local Genesis State
geth --datadir node init genesis.json >> $LOGFILE 2>&1
#geth account new --datadir ./node >> $LOGFILE 2>&1

# Restart GETH Node service on reboot.
touch startgeth.sh >> $LOGFILE 2>&1

cat >> startgeth.sh <<EOL
export HOME=/root
export PATH=$PATH:/usr/local/go/bin:. >> $LOGFILE 2>&1
export GOPATH=/usr/local/go/bin
cd $MOUNT_POINT
./geth --config ./config.toml  --datadir ./node --syncmode full --gcmode=archive --pprofaddr 0.0.0.0 --metrics --pprof --rpc --rpcaddr 0.0.0.0 --rpcapi eth,net,web3,personal --rpccorsdomain '*' >>geth.log 2>&1
EOL

chmod 755 startgeth.sh >> $LOGFILE 2>&1
touch /lib/systemd/system/geth.service >> $LOGFILE 2>&1
cat >> /lib/systemd/system/geth.service <<EOL
[Unit]
Description=Ethereum go client
[Service]
User=root
Type=simple
WorkingDirectory=$MOUNT_POINT
ExecStart=/bin/bash $MOUNT_POINT/startgeth.sh
Restart=on-failure
RestartSec=60
TimeoutStopSec=900m
[Install]
WantedBy=default.target
EOL

systemctl enable geth
systemctl start geth
